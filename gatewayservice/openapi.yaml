openapi: 3.1.0
info:
  title: Gateway Service API
  description: Gateway OpenAPI specification.
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Development server
  - url: http://SOMEIP:8000 # TODO: Replace with the actual IP address of the server.
    description: Production server

tags:
  - name: Utility
    description: Utility endpoints.
  - name: Authentication (/auth)
    description: Endpoints related to authentication.
  - name: üîê Game (/game)
    description: Endpoints related to game management.
  - name: Questions (/questions)
    description: Endpoints related to question retrieval.
  - name: Statistics (/stats)
    description: Endpoints related to statistics retrieval.

paths:
  # Utility
  /health:
    get:
      tags: [Utility]
      summary: Check healthy.
      description: Checks if the gateway service is healthy.
      operationId: checkHealth
      responses:
        "200":
          description: Service is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Health status.
                    example: OK
  # Authentication
  /login:
    post:
      tags: [Authentication (/auth)]
      summary: Authenticates an user.
      description: Authenticates a user and returns a JWT token that can be used to access protected endpoints.
      operationId: authLogin
      requestBody:
        required: true
        description: User credentials for authentication.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: Successful authentication.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    $ref: "#/components/examples/success"
                  username:
                    type: string
                    description: Username of the authenticated user.
                    example: username
                  token:
                    type: string
                    description: JWT token for authentication.
                    example: abc123.def456.ghi789
        "401":
          description: Unauthorized. Invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    $ref: "#/components/examples/failed"
                  message:
                    description: Error message.
                    const: Unauthorized
        "400":
          $ref: "#/components/responses/400"

  /signup:
    post:
      tags: [Authentication (/auth)]
      summary: Registers an user.
      description: Registers a new user into the system.
      operationId: authSignup
      requestBody:
        required: true
        description: User credentials for authentication.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: Successful registration.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    $ref: "#/components/examples/success"
                  message:
                    description: Success message.
                    const: Created
        "401":
          description: Unauthorized. User already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    $ref: "#/components/examples/failed"
                  message:
                    description: Error message.
                    const: Unauthorized
        "400":
          $ref: "#/components/responses/400"

components:
  responses:
    "401":
      description: Unauthorized. Invalid authorization token.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                $ref: "#/components/examples/failed"
              message:
                description: Error message.
                const: Unauthorized

    "400":
      description: Bad request. Missing or invalid parameters.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                $ref: "#/components/examples/failed"
              message:
                description: Error message.
                const: Bad Request
              errors:
                $ref: "#/components/examples/valErrors"
                description: Validation errors.
                type: object
                properties:
                  <property>:
                    type: object
                    properties:
                      type:
                        type: string
                        description: Type of the error.
                        example: field
                      value:
                        type: string
                        description: Value that caused the error.
                        example: invalid username
                      msg:
                        type: string
                        description: Error message.
                        example: Invalid value
                      path:
                        type: string
                        description: Path to the property that caused the error.
                        example: username
                      location:
                        type: string
                        description: Location of the error.
                        example: body

  examples:
    success:
      description: Indicates the operation was successful.
      const: true
    failed:
      description: Indicates the operation failed.
      const: false

  schemas:
    user:
      type: object
      properties:
        username:
          type: string
          description: Username of the user.
          example: username
        password:
          type: string
          description: Password of the user. Must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one number, and one special character.
          example: Str0ngPassw0rd!

  securitySchemes:
    token:
      description: JWT token for authentication. Obtained by logging-in `/auth/login`.
      type: http
      scheme: bearer
      bearerFormat: JWT
