openapi: 3.1.0
info:
  title: Gateway Service API
  description: Gateway OpenAPI specification.
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Development server
  - url: http://4.251.8.219:8000
    description: Production server

tags:
  - name: Utility
    description: Utility endpoints.
  - name: Authentication (/auth)
    description: Endpoints related to authentication.
  - name: üîê Game (/game)
    description: Endpoints related to game management.
  - name: Questions (/questions)
    description: Endpoints related to question retrieval.
  - name: üîê Statistics (/stats)
    description: Endpoints related to statistics retrieval.

paths:
  # Utility
  /health:
    get:
      tags: [Utility]
      summary: Check healthy.
      description: Checks if the gateway service is healthy.
      operationId: checkHealth
      responses:
        "200":
          description: Service is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Health status.
                    example: OK

  # Authentication
  /auth/login:
    post:
      tags: [Authentication (/auth)]
      summary: Authenticates an user.
      description: Authenticates a user and returns a JWT token that can be used to access protected endpoints.
      operationId: authLogin
      requestBody:
        required: true
        description: User credentials for authentication.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: Successful authentication.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    $ref: "#/components/examples/success"
                  username:
                    type: string
                    description: Username of the authenticated user.
                    example: username
                  token:
                    type: string
                    description: JWT token for authentication.
                    example: abc123.def456.ghi789
        "401":
          description: Unauthorized. Invalid credentials.
          $ref: "#/components/responses/401"
        "400":
          $ref: "#/components/responses/400"
  /auth/signup:
    post:
      tags: [Authentication (/auth)]
      summary: Registers an user.
      description: Registers a new user into the system.
      operationId: authSignup
      requestBody:
        required: true
        description: User credentials for authentication.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: Successful registration.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    $ref: "#/components/examples/success"
                  message:
                    description: Success message.
                    const: Created
        "401":
          description: Unauthorized. User already exists.
          $ref: "#/components/responses/401"
        "400":
          $ref: "#/components/responses/400"

  # Game
  /game/question:
    get:
      tags: [üîê Game (/game)]
      summary: Get question.
      description: Retrieves a question for the game.
      operationId: gameGetQuestion
      parameters:
        - $ref: "#/components/parameters/username_query"
      security:
        - token: []
      # * Username is appended by the Gateway service to the request.
      responses:
        "200":
          description: Successful retrieval of the question.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/gameQuestion"
        "401":
          description: Unauthorized. Invalid token.
          $ref: "#/components/responses/401"
  /game/answer:
    post:
      tags: [üîê Game (/game)]
      summary: Validate answer.
      description: Sends the answer selected by the user to check whether it is valid.
      operationId: gameValidateAnswer
      security:
        - token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                # * Username is appended by the Gateway service to the request.
                selectedAnswer:
                  type: string
                  description: Selected answer option.
                  example: "Answer 1"
      responses:
        "200":
          description: Successful retrieval of the question.
          content:
            application/json:
              schema:
                type: object
                properties:
                  correctAnswer:
                    type: string
                    description: Correct answer option.
                    example: "Answer 1"
                  isCorrect:
                    type: boolean
                    description: Indicates whether the user-selected answer was correct.
                    example: true
        "400":
          $ref: "#/components/responses/400"
        "401":
          description: Unauthorized. Invalid token.
          $ref: "#/components/responses/401"
  /game/hint:
    post:
      tags: [üîê Game (/game)]
      summary: Get a hint.
      description: Generates a hint for the currect question.
      operationId: gameGetHint
      security:
        - token: []
      # * Username is appended by the Gateway service to the request.
      responses:
        "200":
          description: Successful hint retrieval.
          content:
            application/json:
              schema:
                type: object
                properties:
                  hint:
                    type: string
                    description: Hint for the current question.
                    example: "The musician was highly influential in the 90s."
        "401":
          description: Unauthorized. Invalid token.
          $ref: "#/components/responses/401"
  /game/save:
    post:
      tags: [üîê Game (/game)]
      summary: Saves the game.
      description: Saves the game.
      operationId: gameSave
      security:
        - token: []
      # * Username is appended by the Gateway service to the request.
      responses:
        "200":
          description: Successful save.
        "401":
          description: Unauthorized. Invalid token.
          $ref: "#/components/responses/401"
  /game/quit:
    post:
      tags: [üîê Game (/game)]
      summary: Quits the game.
      description: Quits the game.
      operationId: gameQuit
      security:
        - token: []
      # * Username is appended by the Gateway service to the request.
      responses:
        "200":
          description: Successful quit.
        "401":
          description: Unauthorized. Invalid token.
          $ref: "#/components/responses/401"

  # Questions
  /questions/question:
    get:
      tags: [Questions (/questions)]
      summary: Get question.
      description: Retrieves a complete question with answer.
      operationId: questionsGet
      responses:
        "200":
          description: Successful retrieval of the question.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/question"
  /questions/question/{category}:
    get:
      parameters:
        - $ref: "#/components/parameters/category"
      tags: [Questions (/questions)]
      summary: Get question from a category.
      description: Retrieves a complete question with answer from a category.
      operationId: questionsGetCategory
      responses:
        "200":
          description: Successful retrieval of the question.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/question"
        "400":
          description: Bad request. Invalid category.
          $ref: "#/components/responses/400"

  # Statistics
  /stats/users/{username}:
    get:
      tags: [Statistics (/stats)]
      summary: Get user statistics.
      description: Retrieves the statistics of a user by their username.
      operationId: statsUserStats
      security:
        - token: []
      parameters:
        - description: Username of the user whose stats to get.
          $ref: "#/components/parameters/username"
      responses:
        "200":
          description: Successful retrieval of user games.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    $ref: "#/components/examples/success"
                  username:
                    type: string
                    description: Username of the user whose stats were computed.
                    example: myusername
                  stats:
                    $ref: "#/components/schemas/stats"
        "400":
          description: Bad request. Missing or invalid path variable.
          $ref: "#/components/responses/400"
        "401":
          description: Unauthorized. Invalid token.
          $ref: "#/components/responses/401"
        "404":
          description: Not found. User not found.
          $ref: "#/components/responses/404"
  /stats/users/{username}/games:
    get:
      tags: [Statistics (/stats)]
      summary: Get user games.
      description: Retrieves the games of a user by their username.
      operationId: statsUserGames
      security:
        - token: []
      parameters:
        - description: Username of the user whose games to get.
          $ref: "#/components/parameters/username"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
      responses:
        "200":
          description: Successful retrieval of user statistics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    $ref: "#/components/examples/success"
                  username:
                    type: string
                    description: Username of the user whose stats were computed.
                    example: myusername
                  games:
                    type: array
                    description: List of games played by the user.
                    items:
                      $ref: "#/components/schemas/game"
        "400":
          description: Bad request. Missing or invalid path variable.
          $ref: "#/components/responses/400"
        "401":
          description: Unauthorized. Invalid token.
          $ref: "#/components/responses/401"
        "404":
          description: Not found. User not found.
          $ref: "#/components/responses/404"

  /stats/games/{gameId}:
    get:
      tags: [Statistics (/stats)]
      summary: Get game.
      description: Retrieves a game by its id.
      operationId: statsGame
      security:
        - token: []
      parameters:
        - $ref: "#/components/parameters/gameId"
      responses:
        "200":
          description: Successful retrieval of the game.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    $ref: "#/components/examples/success"
                  game:
                    $ref: "#/components/schemas/game"
        "400":
          description: Bad request. Missing or invalid path variable.
          $ref: "#/components/responses/400"
        "401":
          description: Unauthorized. Invalid token.
          $ref: "#/components/responses/401"
        "404":
          description: Not found. User not found.
          $ref: "#/components/responses/404"

components:
  parameters:
    gameId:
      name: gameId
      description: Unique identifier of the game.
      in: path
      required: true
      schema:
        type: string
        example: 67ea966e140740014eb1a65e
    username:
      name: username
      in: path
      required: true
      schema:
        type: string
        example: myusername
    username_query:
      name: username
      in: query
      required: true
      schema:
        type: string
        example: myusername
    page:
      name: page
      description: Page number for pagination.
      in: query
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
    size:
      name: size
      description: Size for pagination.
      in: query
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 500
    category:
      name: category
      description: Category of the question.
      in: path
      required: false
      schema:
        type: string
        enum:
          - musician
          - scientist
          - actor
          - painter
          - writer
        example: musician

  responses:
    "401":
      description: Unauthorized.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                $ref: "#/components/examples/failed"
              message:
                description: Error message.
                const: Unauthorized

    "404":
      description: Not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                $ref: "#/components/examples/failed"
              message:
                description: Error message.
                const: Not Found

    "400":
      description: Bad request. Missing or invalid parameters.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                $ref: "#/components/examples/failed"
              message:
                description: Error message.
                const: Bad Request
              errors:
                description: Validation errors.
                type: object
                properties:
                  <property>:
                    type: object
                    properties:
                      type:
                        type: string
                        description: Type of the error.
                        example: field
                      value:
                        type: string
                        description: Value that caused the error.
                        example: invalid username
                      msg:
                        type: string
                        description: Error message.
                        example: Invalid value
                      path:
                        type: string
                        description: Path to the property that caused the error.
                        example: username
                      location:
                        type: string
                        description: Location of the error.
                        example: body

  examples:
    success:
      description: Indicates the operation was successful.
      const: true
    failed:
      description: Indicates the operation failed.
      const: false
    username:
      description: Username of the user.
      type: string
      example: myusername

  schemas:
    user:
      type: object
      properties:
        username:
          type: string
          description: Username of the user.
          example: username
        password:
          type: string
          description: Password of the user. Must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one number, and one special character.
          example: Str0ngPassw0rd!
    stats:
      type: object
      description: User statistics.
      properties:
        time:
          type: object
          description: Time statistics.
          properties:
            total:
              type: integer
              description: Total time spent playing by the user in MS.
              example: 333800
            game:
              type: object
              description: Game time statistics.
              properties:
                min:
                  type: integer
                  description: Minimum time spent on a game in MS.
                  example: 66760
                max:
                  type: integer
                  description: Maximum time spent on a game in MS.
                  example: 66760
                avg:
                  type: integer
                  description: Average time spent on a game in MS.
                  example: 66760
            question:
              type: object
              description: Question time statistics.
              properties:
                min:
                  type: integer
                  description: Minimum time spent on a question in MS.
                  example: 66760
                max:
                  type: integer
                  description: Maximum time spent on a question in MS.
                  example: 66760
                avg:
                  type: integer
                  description: Average time spent on a question in MS.
                  example: 66760
        question:
          type: object
          description: Question statistics.
          properties:
            passed:
              type: integer
              description: Number of questions passed by the user.
              example: 2
            failed:
              type: integer
              description: Number of questions failed by the user.
              example: 3
            total:
              type: integer
              description: Total number of questions attempted by the user.
              example: 5
        game:
          type: object
          description: Game statistics.
          properties:
            total:
              type: integer
              description: Total number of games played by the user.
              example: 5
            hints:
              type: object
              description: Hints statistics.
              properties:
                total:
                  type: integer
                  description: Total number of hints used by the user.
                  example: 3
                avg:
                  type: integer
                  description: Average number of hints used per game by the user.
                  example: 1
                max:
                  type: integer
                  description: Maximum number of hints used in a game by the user.
                  example: 2
                min:
                  type: integer
                  description: Minimum number of hints used in a game by the user.
                  example: 0
    game:
      type: object
      description: Game.
      properties:
        id:
          type: string
          description: Unique identifier of the game. May not appear.
          nullable: true
          example: 67ea966e140740014eb1a65e
        user:
          type: object
          description: User who played the game. May not appear.
          nullable: true
          properties:
            username:
              type: string
              description: Username of the user who played the game.
              example: myusername
        createdAt:
          type: string
          format: date-time
          description: Creation time of the game.
          example: 2025-03-31T13:19:42.271Z
        time:
          type: object
          description: Game time tracking.
          properties:
            started:
              type: string
              format: date-time
              description: Start time of the game.
              example: 2025-03-23T11:37:28.575Z
            finished:
              type: string
              format: date-time
              description: Finish time of the game.
              example: 2025-03-23T11:38:35.335Z
        config:
          type: object
          description: Game configuration.
          properties:
            mode:
              type: enum
              description: Game mode.
              example: musicians
              enum:
                - musicians
            rounds:
              type: integer
              description: Number of rounds in the game.
              example: 3
              min: 1
            time:
              type: integer
              description: Time limit for each question in seconds.
              example: 100
              min: 1
            hints:
              type: integer
              description: Number of hints available for each question.
              example: 3
              min: 0
        hints:
          type: integer
          description: Number of hints used in the game.
          example: 1
          min: 0
        questions:
          type: array
          description: List of questions in the game.
          items:
            type: object
            description: Question tracking.
            properties:
              question:
                type: object
                description: Question object.
                properties:
                  question:
                    type: string
                    description: Question.
                    example: Question?
                  image:
                    type: string
                    format: uri
                    description: URL of the image shown in the question.
                    example: https://example.org
                  answers:
                    type: object
                    description: Question answers.
                    properties:
                      opts:
                        type: array
                        items:
                          type: string
                        description: List of possible answers.
                        example:
                          - 1
                          - 2
                      correct:
                        type: integer
                        description: Index of the correct answer option.
                        example: 1
                  createdAt:
                    type: string
                    format: date-time
                    description: Creation time of the question.
                    example: 2025-03-31T13:19:42.270Z

              time:
                type: object
                description: Time tracking for the question.
                properties:
                  started:
                    type: string
                    format: date-time
                    description: Start time of the question.
                    example: 2025-03-23T11:37:28.575Z
                  finished:
                    type: string
                    format: date-time
                    description: Finish time of the question.
                    example: 2025-03-23T11:38:35.335Z

              selected:
                type: integer
                description: Index of the selected answer option.
                example: 0
    gameQuestion:
      type: object
      description: Question as sent by the Game Service.
      properties:
        question:
          type: string
          description: Question.
          example: Who is the musician shown in the picture?
        image:
          type: string
          format: uri
          description: URL of the image shown in the question.
          example: https://example.org/image.png
        options:
          type: array
          items:
            type: string
          description: List of possible answers.
          example:
            - Answer 1
            - Answer 2

    question:
      type: object
      description: Complete question with answer.
      properties:
        question:
          type: string
          description: Question.
          example: Who is the musician shown in the picture?
        image:
          type: string
          format: uri
          description: URL of the image shown in the question.
          example: https://example.org/image.png
        options:
          type: array
          items:
            type: string
          description: List of possible answers.
          example:
            - Answer 1
            - Answer 2
        answer:
          type: string
          description: Correct answer.
          example: Answer 1
        category:
          type: string
          description: Category of the question.
          example: musician

  securitySchemes:
    token:
      description: JWT token for authentication. Obtained by logging-in `/auth/login`.
      type: http
      scheme: bearer
      bearerFormat: JWT
